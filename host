local exe_name, exe_version = identifyexecutor()
local function home999() end
local function home888() end

if exe_name ~= "Wave Windows" then
    hookfunction(home888, home999)
    if isfunctionhooked(home888) == false then
        game.Players.LocalPlayer:Destroy()
        return LPH_CRASH()
    end
end 

local function check_env(env)
    for _, func in env do
        if type(func) ~= "function" then
            continue
        end

        local functionhook = isfunctionhooked(func)

        if functionhook then
            game.Players.LocalPlayer:Destroy()
            return LPH_CRASH()
        end
    end
end

check_env( getgenv() )
check_env( getrenv() )
--

local Lua_Fetch_Connections = getconnections
local Lua_Fetch_Upvalues = getupvalues
local Lua_Hook = hookfunction 
local Lua_Hook_Method = hookmetamethod
local Lua_Unhook = restorefunction
local Lua_Replace_Function = replaceclosure
local Lua_Set_Upvalue = setupvalue
local Lua_Clone_Function = clonefunction

local Game_RunService = game:GetService("RunService")
local Game_LogService = game:GetService("LogService")
local Game_LogService_MessageOut = Game_LogService.MessageOut

local String_Lower = string.lower
local Table_Find = table.find
local Get_Type = type

local Current_Connections = {};
local Hooked_Connections = {};

local function Test_Table(Table, Return_Type)
for TABLE_INDEX, TABLE_VALUE in Table do
    if type(TABLE_VALUE) == String_Lower(Return_Type) then
        return TABLE_VALUE, TABLE_INDEX
    end

    continue
end
end

local function Print_Table(Table)
table.foreach(Table, print)
end

if getgenv().DEBUG then
print("[auth.injected.live] Waiting...")
end

local good_check = 0

function auth_heart()
return true , true
end

function Lua_Common_Intercept(old, ...)
print(...)
return old(...)
end

function XVNP_L(CONNECTION)
local s, e = pcall(function()
    local OPENAC_TABLE = Lua_Fetch_Upvalues(CONNECTION.Function)[9]
    local OPENAC_FUNCTION = OPENAC_TABLE[1]
    local IGNORED_INDEX = {3, 12, 1, 11, 15, 8, 20, 18, 22}

    Lua_Set_Upvalue(OPENAC_FUNCTION, 14, function(...)
        return function(...)
            local args = {...}

            if type(args[1]) == "table" and args[1][1] then
                pcall(function()
                    if type(args[1][1]) == "userdata" then
                        args[1][1]:Disconnect()
                        args[1][2]:Disconnect()
                        args[1][3]:Disconnect()
                        args[1][4]:Disconnect()
                    end
                end)
            end 
        end
    end)

    Lua_Set_Upvalue(OPENAC_FUNCTION, 1, function(...)
        task.wait(200)
    end)

    hookfunction(OPENAC_FUNCTION, function(...)
        return {}
    end)
end)
end

local XVNP_LASTUPDATE = 0
local XVNP_UPDATEINTERVAL = 5

local XVNP_CONNECTIONSNIFFER;

XVNP_CONNECTIONSNIFFER = Game_RunService.RenderStepped:Connect(function()
if #Lua_Fetch_Connections(Game_LogService_MessageOut) >= 2 then
    XVNP_CONNECTIONSNIFFER:Disconnect()
end

if tick() - XVNP_LASTUPDATE >= XVNP_UPDATEINTERVAL then
    XVNP_LASTUPDATE = tick() 

    local OpenAc_Connections = Lua_Fetch_Connections(Game_LogService_MessageOut)

    for _, CONNECTION in OpenAc_Connections do
        if not table.find(Current_Connections, CONNECTION) then
            table.insert(Current_Connections, CONNECTION)
            table.insert(Hooked_Connections, CONNECTION)

            XVNP_L(CONNECTION)
            
        end
    end
end
end)

local last_beat = 0
Game_RunService.RenderStepped:Connect(function()
if last_beat + 1 < tick() then
    last_beat = tick() + 1 

    local what, are = auth_heart()

    if not are or not what then
        if good_check <= 0 then
            game.Players.LocalPlayer:Destroy()
            return LPH_CRASH()
        else
            good_check -=1
        end
    else
        good_check += 1
    end

end
end)

if getgenv().DEBUG then
print("[auth.injected.live] Started Emulation Thread")
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local GroupService = game:GetService("GroupService")
local Lighting = game:GetService("Lighting")
local ChatService = game:GetService("Chat")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

--Module scripts
local mainModule = require(ReplicatedStorage:WaitForChild("MainModule"))

--Wait for player to be added
local PLAYER = Players.LocalPlayer

local MAIN_EVENT = ReplicatedStorage:WaitForChild("MainEvent")
local PLAYER_GUI = PLAYER:WaitForChild("PlayerGui")

local PLAYER_CREW = PLAYER:WaitForChild("DataFolder"):WaitForChild("Information"):WaitForChild("Crew")

--IGNORED
local IGNORED = workspace:WaitForChild("Ignored")

local function isAlt(userId)
    if not getgenv().alts then
        return false
    end
    for i, id in ipairs(getgenv().alts) do
        if userId == id then
            return true
        end
    end
    return false
end

local PLAYER_CASH = PLAYER:WaitForChild("DataFolder"):WaitForChild("Currency")

-- Function to format numbers with commas
local function commaValue(amount)
    local formatted = tostring(amount)
    local k
    while true do  
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if (k==0) then
            break
        end
    end
    return formatted
end

-- Only load HOST GUI if NOT an alt
if isAlt(PLAYER.UserId) == false then
    local function format(value)
        -- Check if the value is negative
        local isNegative = value < 0
        value = math.abs(value)  -- Take the absolute value for formatting
    
        -- Format the number with commas
        local formatted = tostring(value):reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
    
        -- Add the dollar sign at the beginning
        if isNegative then
            formatted = "$-" .. formatted
        else
            formatted = "$" .. formatted
        end
        
        return formatted
    end
    
    
    hookfunction(game:GetService("UserInputService").GetFocusedTextBox, newcclosure(function(...)
        return 
    end))
    
    
    
    local G2L = {};
    
    
        -- Get the UserInputService to listen for key events
    local UserInputService = game:GetService("UserInputService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    
    -- Function to hide all GUIs
    local function hideGUIs()
        if G2L["1"] then
            G2L["1"].Enabled = false  -- Disables the GUI by setting the "Enabled" property to false
        end
    end
    
    -- Function to show all GUIs
    local function showGUIs()
        if G2L["1"] then
            G2L["1"].Enabled = true  -- Enables the GUI by setting the "Enabled" property to true
        end
    end
    
    
    if gethui():FindFirstChild("SELLERGUI") then 
        gethui():FindFirstChild("SELLERGUI"):Destroy()
    end 
    
    -- Assuming G2L is already defined somewhere in the script
    
    -- Create the ScreenGui and place it in the G2L area
    local player = game.Players.LocalPlayer
    G2L["1"] = Instance.new("ScreenGui", gethui())
    G2L["1"].Name = "SELLERGUI"
    G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling
    
    -- Create the frame
    G2L["2"] = Instance.new("Frame", G2L["1"])
    G2L["2"]["BorderSizePixel"] = 0
    G2L["2"]["BackgroundColor3"] = Color3.fromRGB(70, 70, 70)
    G2L["2"]["Size"] = UDim2.new(0, 520, 0, 296)
    G2L["2"]["Position"] = UDim2.new(0.12741, 0, 0.29397, 0)
    G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
    
    
    -- Create a new frame named "sideFrame" with size {0, 100}, {0, 300} inside G2L["2"]
    local sideFrame = Instance.new("Frame", G2L["2"])
    sideFrame.Name = "sideFrame"  -- Name the inner frame "sideFrame"
    sideFrame.Size = UDim2.new(0, 130, 0, 296)  -- Size {0, 100}, {0, 300}
    sideFrame.Position = UDim2.new(0, 0, 0, 0)  -- Position it inside the parent frame (G2L["2"])
    sideFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)  -- Set a different background color to distinguish it
    sideFrame.BorderSizePixel = 0  -- Remove the border
    sideFrame.ZIndex = 2  -- Set a higher ZIndex for sideFrame to appear above the parent
    sideFrame.BackgroundTransparency = 0.5
    
    
    -- Add rounded corners to sideFrame using UICorner
    local uiCorner = Instance.new("UICorner", sideFrame)
    uiCorner.CornerRadius = UDim.new(0, 5)  -- Adjust the radius value to make the corners more or less rounded

    print("HOST GUI Loaded Successfully!")
end

local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
end
print("Ran")
